<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[c# 获取天气信息]]></title>
    <url>%2F2019%2F12%2F15%2Fc-%E8%8E%B7%E5%8F%96%E5%A4%A9%E6%B0%94%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[使用winform获取天气信息从网站http://www.weather.com.cn/data/sk/101010100.html上请求天气json数据 步骤引用 将图中两项引入 12using System.Web.Script.Serialization;using System.Net; 123456789101112131415161718192021222324252627public class Weather &#123; public Info weatherinfo; &#125; public class Info &#123; public string city;//城市 public string temp; //温度 public string WD; //风向 public string WS; //风力 public string SD; //相对湿度 public string time;//更新时间 &#125; private void Button3_Click(object sender, EventArgs e) &#123; HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(&quot;http://www.weather.com.cn/data/sk/101010100.html&quot;); request.Timeout = 5000; request.Method = &quot;GET&quot;; HttpWebResponse response = (HttpWebResponse)request.GetResponse(); StreamReader sr = new StreamReader(response.GetResponseStream()); string jsonstr = sr.ReadLine(); JavaScriptSerializer j = new JavaScriptSerializer(); Weather weather = new Weather(); weather = j.Deserialize&lt;Weather&gt;(jsonstr); &#125; 参考文章：https://blog.csdn.net/qq_26093511/article/details/51307339]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c# 设置图片透明度]]></title>
    <url>%2F2019%2F10%2F27%2Fc-%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E9%80%8F%E6%98%8E%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[图片透明度1234567891011121314151617181920private Bitmap SetPictureAlpha(Image image, int alpha) &#123; //颜色矩阵 float[][] matrixItems = &#123; new float[]&#123;1,0,0,0,0&#125;, new float[]&#123;0,1,0,0,0&#125;, new float[]&#123;0,0,1,0,0&#125;, new float[]&#123;0,0,0,alpha/255f,0&#125;, new float[]&#123;0,0,0,0,1&#125; &#125;; ColorMatrix colorMatrix = new ColorMatrix(matrixItems); ImageAttributes imageAtt = new ImageAttributes(); imageAtt.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap); Bitmap bmp = new Bitmap(image.Width, image.Height); Graphics g = Graphics.FromImage(bmp); g.DrawImage(image, new Rectangle(0, 0, image.Width, image.Height),0, 0, image.Width, image.Height, GraphicsUnit.Pixel, imageAtt); g.Dispose(); return bmp; &#125;]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>gdi，winform</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c# 圆角矩形]]></title>
    <url>%2F2019%2F10%2F27%2Fc-%E5%9C%86%E8%A7%92%E7%9F%A9%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[圆角矩形1234567891011121314151617181920212223242526272829303132333435363738394041private void Draw(Rectangle rectangle, Graphics g, int _radius, bool cusp, Color begin_color, Color end_color) &#123; int span = 2; //抗锯齿 g.SmoothingMode = SmoothingMode.AntiAlias; //渐变填充 LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush(rectangle, begin_color, end_color, LinearGradientMode.Vertical); //画尖角 if (cusp) &#123; span = 10; PointF p1 = new PointF(rectangle.Width - 12, rectangle.Y -10); PointF p2 = new PointF(rectangle.Width - 12, rectangle.Y -30); PointF p3 = new PointF(rectangle.Width, rectangle.Y -20); PointF[] ptsArray = &#123; p1, p2, p3 &#125;; g.FillPolygon(myLinearGradientBrush, ptsArray); &#125; //填充 g.FillPath(myLinearGradientBrush, DrawRoundRect(rectangle.X, rectangle.Y, rectangle.Width - span, rectangle.Height - 1, _radius)); Pen shadowPen = new Pen(Color.LightGray); //加边框 g.DrawPath(shadowPen,DrawRoundRect(rectangle.X, rectangle.Y, rectangle.Width - span, rectangle.Height - 1, _radius)); &#125; public static GraphicsPath DrawRoundRect(int x, int y, int width, int height, int radius) &#123; //四边圆角 GraphicsPath gp = new GraphicsPath(); gp.AddArc(x, y, radius, radius, 180, 90); gp.AddArc(width - radius, y, radius, radius, 270, 90); gp.AddArc(width - radius, height - radius, radius, radius, 0, 90); gp.AddArc(x, height - radius, radius, radius, 90, 90); gp.CloseAllFigures(); return gp; &#125; private void pictureBox1_Paint(object sender, PaintEventArgs e) &#123; Draw(e.ClipRectangle, e.Graphics, 18, false, Color.FromArgb(101, 101, 101), Color.FromArgb(58, 58, 55)); base.OnPaint(e); Graphics g = e.Graphics; g.DrawString(&quot;mc&quot;, new Font(&quot;微软雅黑&quot;, 15, FontStyle.Bold), new SolidBrush(Color.White), new PointF(16, 14)); &#125;]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>winform</tag>
        <tag>gdi+</tag>
        <tag>矩形</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c# 无边框拖动窗体]]></title>
    <url>%2F2019%2F10%2F27%2Fc-%E6%97%A0%E8%BE%B9%E6%A1%86%E6%8B%96%E5%8A%A8%E7%AA%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[窗体拖动12345678910111213141516171819202122232425262728293031323334353637383940414243bool beginMove; int currentXPosition; int currentYPosition; bool start=false; private void PictureBox1_MouseDown(object sender, MouseEventArgs e) &#123; if(e.Button==MouseButtons.Left) &#123; beginMove = true; currentXPosition = MousePosition.X;//鼠标的x坐标为当前窗体左上角x坐标 currentYPosition = MousePosition.Y;//鼠标的y坐标为当前窗体左上角y坐标 &#125; &#125; private void PictureBox1_MouseMove(object sender, MouseEventArgs e) &#123; if (beginMove) &#123; x += MousePosition.X - currentXPosition;//根据鼠标x坐标确定窗体的左边坐标x y += MousePosition.Y - currentYPosition;//根据鼠标的y坐标窗体的顶部，即Y坐标 currentXPosition = MousePosition.X; currentYPosition = MousePosition.Y; &#125; if(start==true) &#123; img = Image.FromFile(ofd.FileName);//重置 paint(); &#125; &#125; private void PictureBox1_MouseUp(object sender, MouseEventArgs e) &#123; if (e.Button == MouseButtons.Left) &#123; currentXPosition = 0; //设置初始状态 currentYPosition = 0; beginMove = false; &#125; &#125;]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>winform</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java数据结构学习笔记]]></title>
    <url>%2F2019%2F09%2F29%2Fjava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[javascript]]></title>
    <url>%2F2019%2F09%2F23%2Fjavascript%2F</url>
    <content type="text"><![CDATA[javascript学习笔记js变量​ var声明变量 12var name=prompt(&quot;你的名字是：&quot;,&quot;&quot;)document.write(&quot;&lt;h1&gt;&quot;+name+&quot;&lt;/h1&gt;&quot;) prompt记录键盘输入，并赋值给变量。 js条件语句12345678910111213&lt;script&gt; var pwd =prompt(&quot;请输入你的密码&quot;,&quot;&quot;);//pwd是一个字符串 if (pwd==123456) &#123; //布尔函数 true false 1 0 真 假 document.write(&quot;登陆成功！&quot;); &#125; else &#123; document.write(&quot;登陆失败!&quot;); &#125; &lt;/script&gt; 用法与c# java类似。· while循环12345678910111213&lt;script&gt; var pwd = prompt(&quot;请输入你的密码&quot;,&quot;&quot;); if(pwd==&quot;123456&quot;) &#123; document.write(&quot;登陆成功&quot;); &#125; while(pwd !==&quot;123456&quot;) &#123; pwd=prompt(&quot;密码输入错误，请重新输入:&quot;,&quot;&quot;); &#125; &lt;/script&gt; for循环123456789101112&lt;script&gt; // var num=1; // while(num&lt;=10) // &#123; // document.write(num+&quot;&lt;br&gt;&quot;); // num=num+1; // &#125; for (var num=1;num&lt;=10;num++) &#123; document.write(num+&quot;&lt;br&gt;&quot;); &#125; &lt;/script&gt; ​ 大部分与c#相似，但定义变量更方便。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>javascript web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c# 读写文件时文件正由另一进程使用]]></title>
    <url>%2F2019%2F09%2F11%2Fc-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%97%B6%E6%96%87%E4%BB%B6%E6%AD%A3%E7%94%B1%E5%8F%A6%E4%B8%80%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[更改之前：12345678Sw = new StreamWriter(&quot;d:\\output.txt&quot;);FileStream fs = new FileStream(&quot;d:\\output.txt&quot;, FileMode.Open）fs.Position = fs.Length;//连续向文件写入数据零流 while ((str = inpipe.Read()) != null) &#123; Sw.Write(str+&quot;\n&quot;); &#125; Sw.Close(); 报错文件正由另一进程使用。 修改为：12345678Sw = new StreamWriter(&quot;d:\\output.txt&quot;); FileStream fs = new FileStream(&quot;d:\\output.txt&quot;, FileMode.Open, FileAccess.Read, FileShare.ReadWrite); fs.Position = fs.Length; while ((str = inpipe.Read()) != null) &#123; Sw.Write(str+&quot;\n&quot;); &#125; Sw.Close(); 解决 参考：https://blog.csdn.net/superhoy/article/details/7931234]]></content>
      <categories>
        <category>文件</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 的继承与组合]]></title>
    <url>%2F2019%2F07%2F27%2FPython-%E7%9A%84%E7%BB%A7%E6%89%BF%E4%B8%8E%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[python的继承普通继承举例： 1class parent: def hello(self): print(&quot;调用父类&quot;)class child(parent): passc=child()c.hello() 多重继承1class base1: def foo1(self): print(&quot;base1&quot;)class base2: def foo2(self): print(&quot;base2&quot;)class c(base1,base2): passc1=c()c1.foo1()c1.foo2() 组合把类和实例化放到新类 1class Turtle: def __init__(self,x): self.num = xclass Fish: def __init__(self,x): self.num = xclass pool: def __init__(self,x,y): self.turtle = Turtle(x) self.fish = Fish(y) def print_num(self): print(&quot;乌龟%d 鱼%d&quot;%(self.turtle.num,self.fish.num))pool1=pool(1,10)pool1.print_num()]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>继承，组合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo解决不蒜子统计功能无法显示的问题]]></title>
    <url>%2F2019%2F07%2F23%2F%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[使用主题：next 在启用next主题自带不蒜子功能后，显示不了数字 解决办法 首先找到文件路径为/theme/next/layout/_third-party/analytics/busuanzi-counter.swig的文件。 将 图中选定部分替换为https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js即可 本地查看数字会过大，上传后就会正常 参考文章：https://www.jianshu.com/p/fd3accaa2ae0]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>不蒜子统计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo gitment评论配置]]></title>
    <url>%2F2019%2F07%2F17%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[gitment评论系统接入hexo 使用主题：next 注册 OAuth Applicationhttps://github.com/settings/applications/new 12345application name: GitmentHomepage URL: 你的博客网址AuThorization callback Url：你的博客网址 点击 register application 会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录 建立一个储存评论的GitHub仓库命名为 gitment-comments 修改主题配置文件中gitmentenable： true github_user: 你的GitHub名称 github_repo: 仓库名称 client_id: 第一步里的id client_secret: 第一步里的secret 按理来说进行到这一步hexo g再 hexo s就可以用了 但是我配置完成后出现了erro的问题 报错object ProgressEvent解决方法打开目录blog\themes\next\layout_third-party\comments下的gitment.swig 将 12&lt;link rel=&quot;stylesheet&quot; href=&quot;https://billts.site/extra_css/gitment.css&quot;&gt; &lt;script src=&quot;https://billts.site/js/gitment.js&quot;&gt;&lt;/script&gt; 更换 12&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 报错validation failed解决方法将gitment.swig中的id改为 1id: &apos;&lt;%= page.date %&gt;&apos; hexo d后等一会就可以使用了]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
